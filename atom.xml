<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>楊蘇國的博客</title>
  
  
  <link href="https://yangsuguo.github.io/ysg.github.io/atom.xml" rel="self"/>
  
  <link href="https://yangsuguo.github.io/ysg.github.io/"/>
  <updated>2024-06-04T06:47:24.712Z</updated>
  <id>https://yangsuguo.github.io/ysg.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue 知识集录</title>
    <link href="https://yangsuguo.github.io/ysg.github.io/2024/06/04/vue-zhi-shi-ji-lu/"/>
    <id>https://yangsuguo.github.io/ysg.github.io/2024/06/04/vue-zhi-shi-ji-lu/</id>
    <published>2024-06-03T16:00:00.000Z</published>
    <updated>2024-06-04T06:47:24.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-知识集录"><a href="#Vue-知识集录" class="headerlink" title="Vue 知识集录"></a>Vue 知识集录</h1><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>vue生命周期分为四个阶段<br>第一阶段（创建阶段）：beforeCreate，created<br>第二阶段（挂载阶段）：beforeMount（render），mounted<br>第三阶段（更新阶段）：beforeUpdate，updated<br>第四阶段（销毁阶段）：beforeDestroy，destroyed</p><h3 id="1-beforeCreate"><a href="#1-beforeCreate" class="headerlink" title="1. beforeCreate"></a>1. beforeCreate</h3><p><strong>官网</strong>：在实例初始化之后,进行数据侦听和事件&#x2F;侦听器的配置之前同步调用。</p><p><strong>详细</strong>：<strong>在这个阶段，数据是获取不到的，并且真实dom元素也是没有渲染出来的</strong></p><hr><h3 id="2-created"><a href="#2-created" class="headerlink" title="2. created"></a>2. created</h3><p><strong>官网</strong>：在实例创建完成后被立即同步调用。在这一步中，实例已完成对选项的处理，意味着以下内容已被配置完毕：数据侦听、计算属性、方法、事件&#x2F;侦听器的回调函数。然而，挂载阶段还没开始，且 $el property 目前尚不可用。</p><p><strong>详细</strong>：在这个阶段，<strong>可以访问到数据了</strong>，但是页面当中真实dom节点还是没有渲染出来，在这个钩子函数里面，可以进行相关初始化事件的绑定、发送请求操作</p><hr><h3 id="3-beforeMount"><a href="#3-beforeMount" class="headerlink" title="3. beforeMount"></a>3. beforeMount</h3><p><strong>官网</strong>：在挂载开始之前被调用：相关的 render 函数首次被调用。</p><p><strong>详细</strong>：代表dom马上就要被渲染出来了，但是却还没有真正的渲染出来，这个钩子函数与created钩子函数用法基本一致，可以进行相关初始化事件的绑定、发送ajax操作</p><hr><h3 id="4-mounted"><a href="#4-mounted" class="headerlink" title="4. mounted"></a>4. mounted</h3><p><strong>官网</strong>：实例被挂载后调用，这时 el 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。<br>注意 mounted 不会保证所有的子组件也都被挂载完成。如果你希望等到整个视图都渲染完毕再执行某些操作，可以在 mounted 内部使用 vm.$nextTick：</p><p><strong>详细</strong>：挂载阶段的最后一个钩子函数,数据挂载完毕，真实dom元素也已经渲染完成了,这个钩子函数内部可以做一些实例化相关的操作</p><hr><h3 id="5-beforeUpdate"><a href="#5-beforeUpdate" class="headerlink" title="5. beforeUpdate"></a>5. beforeUpdate</h3><p><strong>官网</strong>：在数据发生改变后，DOM 被更新之前被调用。这里适合在现有 DOM 将要被更新之前访问它，比如移除手动添加的事件监听器。</p><p><strong>详细</strong>：这个钩子函数初始化的不会执行,当组件挂载完毕的时候，并且当数据改变的时候，才会立马执行,这个钩子函数获取dom的内容是更新之前的内容</p><hr><h3 id="6-updated"><a href="#6-updated" class="headerlink" title="6. updated"></a>6. updated</h3><p><strong>官网</strong>：在数据更改导致的虚拟 DOM 重新渲染和更新完毕之后被调用。<br>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。</p><p><strong>详细</strong>：这个钩子函数获取dom的内容是更新之后的内容生成新的虚拟dom，新的虚拟dom与之前的虚拟dom进行比对，差异之后，就会进行真实dom渲染。在updated钩子函数里面就可以获取到因diff算法比较差异得出来的真实dom渲染了。</p><hr><h3 id="7-beforeDestroy"><a href="#7-beforeDestroy" class="headerlink" title="7. beforeDestroy"></a>7. beforeDestroy</h3><p><strong>官网</strong>：实例销毁之前调用。在这一步，实例仍然完全可用。</p><p><strong>详细</strong>：当组件销毁的时候，就会触发这个钩子函数代表销毁之前，可以做一些善后操作,可以清除一些初始化事件、定时器相关的东西。</p><hr><h3 id="8-destroyed"><a href="#8-destroyed" class="headerlink" title="8. destroyed"></a>8. destroyed</h3><p><strong>官网</strong>：实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p><p><strong>详细</strong>：Vue实例失去活性，完全丧失功能</p><a class="simple-lightbox" href="https://img.picui.cn/free/2024/06/04/665eb84427e62.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img.picui.cn/free/2024/06/04/665eb84427e62.png"  style="zoom:25%;"  lazyload></a><h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><ul><li>v-once - 定义它的元素或组件只渲染一次，包括元素或组件的所有节点，首次渲染后，不再随数据的变化重新渲染，将被视为静态内容。</li><li>v-cloak - 这个指令保持在元素上直到关联实例结束编译 – 解决初始化慢与闪动</li><li>v-bind - 绑定属性，动态更新HTML元素上的属性。例如 v-bind:class。</li><li>v-on - 用于监听DOM事件。例如 v-on:click v-on:keyup</li><li>v-html - 赋值就是变量的innerHTML – 注意防止xss攻击</li><li>v-text - 更新元素的textContent</li><li>v-model - 在普通标签。变成value和input的语法糖，并且会处理拼音输入法的问题。2、再组件上。也是处理value和input语法糖。</li><li>v-if &#x2F; v-else &#x2F; v-else-if。可以配合template使用；在render函数里面就是三元表达式。</li><li>v-show - 使用指令来实现 – 最终会通过display来进行显示隐藏</li><li>v-for - 循环指令编译出来的结果是 -L 代表渲染列表。优先级比v-if高最好不要一起使用，尽量使用计算属性去解决。注意增加唯一key值，不要使用index作为key。</li><li>v-pre - 跳过这个元素以及子元素的编译过程，以此来加快整个项目的编译速度。</li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p><strong>事件修饰符</strong></p><ul><li>.stop 阻止事件继续传播</li><li>.prevent 阻止标签默认行为</li><li>.capture 使用事件捕获模式，即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理</li><li>.self 只当在 event.target 是当前元素自身时触发处理函数</li><li>.once 事件只会触发一次</li><li>.passive 告诉浏览器你不想阻止事件的默认行为</li></ul><p><strong>v-model 的修饰符</strong></p><ul><li>.lazy 通过这个修饰符，转变为在 change 事件再同步</li><li>.number 自动将用户输入值转化为数值类型</li><li>.trim 自动过滤用户输入的收尾空格</li></ul><p><strong>键盘事件修饰符</strong></p><ul><li>.enter</li><li>.tab</li><li>.delete (捕获“删除”和“退格”键)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>.right</li></ul><p><strong>系统修饰符</strong></p><ul><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta</li></ul><p><strong>鼠标按钮修饰符</strong></p><ul><li>.left</li><li>.right</li><li>.middle</li></ul><h2 id="组件通讯"><a href="#组件通讯" class="headerlink" title="组件通讯"></a>组件通讯</h2><p>父子通信：</p><ol><li>父向子传递数据是通过 props，子向父是通过 events（emit）；</li><li>通过父链子链也可以通信（parent &#x2F; $children）；</li><li>ref也可以访问组件实例；provide &#x2F; inject API。</li></ol><p>二、兄弟通信：</p><ol><li>Bus</li><li>Vuex</li><li>Pinia</li></ol><p>三、跨级通信：</p><ol><li>Bus；</li><li>Vuex；</li><li>provide &#x2F; inject API。</li></ol><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h4 id="会修改原数组的-会进行渲染更新"><a href="#会修改原数组的-会进行渲染更新" class="headerlink" title="会修改原数组的 会进行渲染更新"></a>会修改原数组的 会进行渲染更新</h4><ul><li><p>push()：向数组末尾添加一个或多个元素。</p></li><li><p>pop()：移除数组中的最后一个元素。</p></li><li><p>shift()：移除数组中的第一个元素。</p></li><li><p>unshift()：向数组开头添加一个或多个元素。</p></li><li><p>splice()：从指定索引位置添加或移除元素。</p></li><li></li><li><p>join()：将数组合并成字符串</p></li><li><p>reverse()：逆序</p></li><li><p>sort()：排序，如果数组包含undefined，会被排到数组的尾部，默认以字母表顺序排序</p></li><li><p>toString()：将每个元素转化为字符串</p></li><li><p>forEach()：遍历数组，为每个元素调用指定的函数</p></li></ul><h4 id="不修改原数组的-不会进行渲染更新"><a href="#不修改原数组的-不会进行渲染更新" class="headerlink" title="不修改原数组的 不会进行渲染更新"></a>不修改原数组的 不会进行渲染更新</h4><ul><li><p>slice()：返回数组的一部分，不修改原数组。</p></li><li><p>map() ：返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。<br>按照原始数组元素顺序依次处理元素。</p></li><li><p>concat()：创建并返回一个新数组可添加</p></li><li><p>filter()：根据条件过滤数组并返回符合条件的新数组，不修改原数组。</p></li><li></li><li><p>every()方法是只有数组中所以元素都满足某个条件才会返回true； </p></li><li><p>some()方法是只要有满足条件的值，就返回true</p></li><li><p>indexOf()：搜索整个数组中具有给定值的元素</p></li><li><p>lastIndexOf()：反向搜索整个数组中具有给定值的元素</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-知识集录&quot;&gt;&lt;a href=&quot;#Vue-知识集录&quot; class=&quot;headerlink&quot; title=&quot;Vue 知识集录&quot;&gt;&lt;/a&gt;Vue 知识集录&lt;/h1&gt;&lt;h2 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="个人规划" scheme="https://yangsuguo.github.io/ysg.github.io/tags/%E4%B8%AA%E4%BA%BA%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>毕业设计文档</title>
    <link href="https://yangsuguo.github.io/ysg.github.io/2024/04/10/hele/"/>
    <id>https://yangsuguo.github.io/ysg.github.io/2024/04/10/hele/</id>
    <published>2024-04-09T16:00:00.000Z</published>
    <updated>2024-10-25T09:05:44.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="？？？"><a href="#？？？" class="headerlink" title="？？？"></a>？？？</h1><h2 id="主要信息载体数据来源："><a href="#主要信息载体数据来源：" class="headerlink" title="主要信息载体数据来源："></a>主要信息载体数据来源：</h2><ul><li><p>书籍【中国ISBN目录】</p></li><li><p>漫画</p></li><li><p>游戏</p></li><li><p>动画&amp;轻小说【BMI】</p></li><li><p>电影&amp;电视剧</p></li><li><p>【音乐剧】【中国艺术】想加</p></li></ul><h2 id="项目背景与人群："><a href="#项目背景与人群：" class="headerlink" title="项目背景与人群："></a>项目背景与人群：</h2><p><strong>主要针对青年与二次元群体</strong>，减少用户踩坑，记录用户娱乐体验。</p><p>目前我没有找到<strong>泛娱乐</strong>化的评分平台，目前权威的都是专注于细分领域的。用户往往需要在不同平台来回切换，我们主要是提供一站式的评分参照</p><p>对于【知乎，虎扑，大众评分】这种UGC平台，个人回答结果往往具有<strong>主观性</strong>。目前我认为该市场为存量市场</p><h2 id="主要数据源-API【HeLe】"><a href="#主要数据源-API【HeLe】" class="headerlink" title="主要数据源 API【HeLe】"></a>主要数据源 API【HeLe】</h2><ol><li>bangumi【动漫+漫画+轻小说】：<a href="https://github.com/bangumi/api">https://github.com/bangumi/api</a><ul><li>App id：bgm3063662e1d8747988</li><li>App Secret：427cfed140895351b35c06d45c1ef6e6</li></ul></li><li>TMDB【电影+电视剧】：<a href="https://developer.themoviedb.org/reference/intro/authentication">https://developer.themoviedb.org/reference/intro/authentication</a><ul><li>Access Token Auth：eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1Y2MxNWI5YzY5YjczOWZkYTliOWNjMzA2NmEwYTRmZiIsInN1YiI6IjY2M2IxMGE1OWE0YjliZGFmN2I1NzRiMSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.rfH00EfVJMJGiMhox6rJxL0zlDFXQmUJfONdNxeihxA</li><li>API Key Auth：5cc15b9c69b739fda9b9cc3066a0a4ff</li></ul></li><li>IGDB【游戏】：<a href="https://api-docs.igdb.com/#getting-started">https://api-docs.igdb.com/#getting-started</a></li></ol><h2 id="主要需求："><a href="#主要需求：" class="headerlink" title="主要需求："></a>主要需求：</h2><ul><li>分类查询</li><li>播放表</li><li>标记【读过，看过，玩过】 【想读，想看，想玩】【搁置】</li><li>标注评分漫画+书籍 +游戏+动画+轻小说+电影 +电视剧 ** 具体是直接展示还是计算权重，取决于是否加入用户评分 **</li><li>记录用户标记感想与吐槽【可以附上证据增加真实性】</li><li>各分类排行榜【ACG内容为：BMI，电影与电视剧为：TMDB】</li><li>wiki【ACG内容为：BMI，电影与电视剧为：TMDB】</li></ul><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>Flutter：Android客户端</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><h3 id="bangumi"><a href="#bangumi" class="headerlink" title="bangumi"></a>bangumi</h3><p>开发文档：<a href="https://github.com/bangumi/dev-docs">https://github.com/bangumi/dev-docs</a></p><p>Go后端：<a href="https://github.com/bangumi/server">https://github.com/bangumi/server</a></p><p>后端开发环境：<a href="https://github.com/bangumi/dev-env">https://github.com/bangumi/dev-env</a></p><p>API文档：<a href="https://github.com/bangumi/api">https://github.com/bangumi/api</a></p><h2 id="UI设计："><a href="#UI设计：" class="headerlink" title="UI设计："></a>UI设计：</h2><p><a class="simple-lightbox" href="/ysg.github.io/assets/image-20240529090835051.png"><img   src="/ysg.github.io/images/loading.svg" data-src="/ysg.github.io/assets/image-20240529090835051.png"  alt="image-20240529090835051" lazyload></a></p><hr><ul><li><p>BMI官方API</p></li><li><p>ISBN API：</p></li><li><p>豆瓣 API：</p></li><li><p>萌娘百科wiki API：</p></li><li><p>图床：</p></li><li><p>IGN API</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;？？？&quot;&gt;&lt;a href=&quot;#？？？&quot; class=&quot;headerlink&quot; title=&quot;？？？&quot;&gt;&lt;/a&gt;？？？&lt;/h1&gt;&lt;h2 id=&quot;主要信息载体数据来源：&quot;&gt;&lt;a href=&quot;#主要信息载体数据来源：&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="个人规划" scheme="https://yangsuguo.github.io/ysg.github.io/tags/%E4%B8%AA%E4%BA%BA%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>项目</title>
    <link href="https://yangsuguo.github.io/ysg.github.io/2024/03/10/jiu-ye-zhi-dao/"/>
    <id>https://yangsuguo.github.io/ysg.github.io/2024/03/10/jiu-ye-zhi-dao/</id>
    <published>2024-03-09T16:00:00.000Z</published>
    <updated>2024-10-25T12:30:03.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><ol><li>熟练<strong>flutter</strong></li><li>熟练<strong>IDEA</strong></li><li>个人博客</li><li>熟悉JAVA SE</li><li>熟悉vue及uniapp</li><li>熟悉Git的使用</li><li>了解ArchLinux，SpringBoot3，MySQL，Docker。</li><li>了解软件制作流程</li></ol><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><ol><li><p>2022-12-13  使用JAVA FX + MySQL制作的<strong>图书管理系统</strong>（个人原创）</p><table><thead><tr><th><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/10/yLDRs89M.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/10/yLDRs89M.png"  alt="image-20240310161155364.png" lazyload></a></th><th><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/10/COI4tIhL.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/10/COI4tIhL.png"  alt="image-20240310161217404.png" lazyload></a></th></tr></thead></table></li><li><p>2023-6-1 使用vue2+uniapp+SpringBoot3 + MySQL制作<strong>个人博客</strong>（个人原创）</p><ul><li><p>实现了<strong>网页</strong>与<strong>微信小程序</strong>双端展示运行与<strong>夜间模式</strong></p><table><thead><tr><th><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/10/BiEWIQc4.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/10/BiEWIQc4.png"  alt="image-20240310162050696.png" lazyload></a></th><th><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/10/TPwshAiB.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/10/TPwshAiB.png"  alt="image-20240310162205344.png" lazyload></a></th></tr></thead></table></li></ul></li><li><p>2023-12-18 使用<strong>Flutter</strong>制作了<strong>仿</strong>官方知乎日报(个人原创)</p><table><thead><tr><th><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/10/2I1j5XxK.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/10/2I1j5XxK.png"  alt="S40310-16263025_com.example.item_news.png" lazyload></a></th><th><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/10/bxtucvBK.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/10/bxtucvBK.png"  alt="S40310-16263408_com.example.item_news.png" lazyload></a></th><th><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/10/6WYsgXEf.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/10/6WYsgXEf.png"  alt="S40310-16264393_com.example.item_news.png" lazyload></a></th><th><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/10/R1a00dMm.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/10/R1a00dMm.png"  alt="S40310-16264782_com.example.item_news.png" lazyload></a></th></tr></thead></table></li><li><p>2023-12-28 在安卓原生项目（JAVA）中改进课程项目UI(个人原创)</p><table><thead><tr><th><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/10/VUS0siQ6.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/10/VUS0siQ6.png"  alt="S40310-16321076_com.example.catmusic.png" lazyload></a></th><th><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/10/Az0fP8fJ.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/10/Az0fP8fJ.png"  alt="S40310-16321493_com.example.catmusic.png" lazyload></a></th><th><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/10/7tuWufIM.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/10/7tuWufIM.png"  alt="S40310-16321982_com.example.catmusic.png" lazyload></a></th><th><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/10/cvlAQf5a.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/10/cvlAQf5a.png"  alt="S40310-16323130_com.example.catmusic.png" lazyload></a></th></tr></thead></table></li><li><p>2024-3-10 使用Hexo框架搭建个人博客</p></li></ol><h2 id="个人简历"><a href="#个人简历" class="headerlink" title="个人简历"></a>个人简历</h2><p><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/12/kis8Ccu8.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/12/kis8Ccu8.png"  alt="个人简历-楊蘇國.png" lazyload></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;技能&quot;&gt;&lt;a href=&quot;#技能&quot; class=&quot;headerlink&quot; title=&quot;技能&quot;&gt;&lt;/a&gt;技能&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;熟练&lt;strong&gt;flutter&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;熟练&lt;strong&gt;IDEA&lt;/strong&gt;&lt;/li&gt;</summary>
      
    
    
    
    
    <category term="个人规划" scheme="https://yangsuguo.github.io/ysg.github.io/tags/%E4%B8%AA%E4%BA%BA%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yangsuguo.github.io/ysg.github.io/2024/03/07/hello-world/"/>
    <id>https://yangsuguo.github.io/ysg.github.io/2024/03/07/hello-world/</id>
    <published>2024-03-07T06:47:01.799Z</published>
    <updated>2024-03-08T11:03:20.295Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>基本脚注<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="footnote--top">[1]<content class="footnote--pop-ups">基本脚注内容</content></span></a></sup><br>这是一个内联脚注<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="footnote--top">[2]<content class="footnote--pop-ups">内联脚注</content></span></a></sup><br>另一个<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="footnote--top">[3]<content class="footnote--pop-ups">段落<br>脚注<br>内容</content></span></a></sup><br>另一个<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="footnote--top">[4]<content class="footnote--pop-ups">一些脚注内容 <a href="https://en.wikipedia.org/wiki/Markdown">markdown</a></content></span></a></sup></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">基本脚注内容<a href="#fnref:1"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">内联脚注<a href="#fnref:2"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">段落脚注内容<a href="#fnref:3"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">一些脚注内容 <a href="https://en.wikipedia.org/wiki/Markdown">markdown</a><a href="#fnref:4"> ↩</a></span></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>简单使用CLion开发STM32H7系列【填坑中……】</title>
    <link href="https://yangsuguo.github.io/ysg.github.io/2024/03/07/jian-dan-shi-yong-clion-kai-fa-stm32h7-xi-lie-tian-keng-zhong/"/>
    <id>https://yangsuguo.github.io/ysg.github.io/2024/03/07/jian-dan-shi-yong-clion-kai-fa-stm32h7-xi-lie-tian-keng-zhong/</id>
    <published>2024-03-06T16:00:00.000Z</published>
    <updated>2024-03-10T09:16:05.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><ul><li><p><strong>CLion</strong></p></li><li><p><strong>STM32CubeMX</strong></p></li><li><p><strong>MinGW</strong></p></li><li><p><strong>OpenOCD</strong></p></li><li><p><strong>arm-none-eabi-gcc</strong></p></li><li><p>ST-LINK V2驱动</p></li><li><p>J-LINK 驱动</p></li><li><p>USB 串口（CH340）驱动</p></li></ul><h2 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h2><ul><li>STM32H750VBT6</li><li>星光 MINI_STM32H7 开发板</li><li>ST-Link V2下载器</li></ul><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ol><li><p>官方最新版CLion + 破解</p></li><li><p>STM32CubaMX 【建议版本6.5.0 IDE选SW4STM32】</p><p>安装完成后建议修改 <strong>STM32Repository</strong> 位置（尽量不要有中文）</p><p><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/07/Y0qJNtrH.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/07/Y0qJNtrH.png"  alt="QQ截图20240110144706.png" lazyload></a></p></li><li><p>OpenOCD：OpenOCD是用于对STM32进行下载仿真的工具，是一个开源软件包 </p><ul><li>Windows版本下从<a href="http://gnutoolchains.com/arm-eabi/openocd/">这里</a>下载，下载好解压到一个目录就行</li></ul></li><li><p>MinGW<br>Clion需要使用MinGW环境来配置工具链<br>MinGW： <a href="https://osdn.net/projects/mingw/releases/">Minimalist GNU for Windows</a></p><ul><li>下载完成后把<code>Basic Setup</code>里面的组件全部勾选（也可也去掉不需要的语言编译器比如Objective-C）。</li></ul></li><li><p>Arm-none-eabi-gcc<br>Windows下载：<a href="https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads">https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads</a> ，选择ZIP压缩包形式的</p></li></ol><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>配置系统的环境变量，在Path环境变量里面添加</p><ul><li><strong>MinGW</strong>：<code>你的路径</code>\MinGW\bin</li><li><strong>gcc-arm-none-eabi</strong>：<code>你的路径</code>\gcc-arm-none-eabi-10.3-2021.10\bin</li></ul><p>完成后终端验证（有信息则成功）</p><ul><li>gcc -v</li><li>arm-none-eabi-gcc -v</li></ul><h3 id="CLion设置配置"><a href="#CLion设置配置" class="headerlink" title="CLion设置配置"></a>CLion设置配置</h3><p>打开CLion设置 &gt; 构建、执行、部署 &gt; 工具链</p><ul><li><p>建议新建一个新配置并改名为<code>MinGW STM32</code></p></li><li><p>详细配置，根据你的MinGW，gcc-arm-none-eabi（gcc，g++，gdb）进行设置</p><p><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/07/AYWmh2DG.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/07/AYWmh2DG.png"  alt="屏幕截图 2024-03-06 190246.png" lazyload></a></p></li><li><p>返回 CLion设置 &gt; 构建、执行、部署 检查<code>CMake</code>确认一下<strong>工具链</strong>是否正确</p><p><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/07/qRa0WdNl.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/07/qRa0WdNl.png"  alt="屏幕截图 2024-03-06 190810.png" lazyload></a></p></li><li><p>进入CLion设置 &gt; 构建、执行、部署 &gt; 嵌入式开发 设置安装完成的STM32CubeMX，OpenOCD路径</p><p><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/07/auVhQhqB.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/07/auVhQhqB.png"  alt="屏幕截图 2024-03-06 191148.png" lazyload></a></p></li></ul><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>期间弹出的板卡配置选择默认关闭</p><ol><li><p>使用<code>CLion</code>创建<strong>STM32CubeMX</strong>项目，会自动生成一个【*.ioc】文件点击打开<strong>STM32CubeMX</strong>创建项目</p></li><li><p>默认生成项目芯片型号是<code>STM32F030F4Px</code>，更改型号为<strong>STM32H750VBT6</strong>然后确认</p><p><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/07/ThOpYHrU.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/07/ThOpYHrU.png"  alt="屏幕截图 2024-03-06 192241.png" lazyload></a></p></li><li><p>直接点击Project Manager</p><p>注意：就是在下面的设置中<strong>项目名称和路径一定要和在Clion中建立的一致</strong>，这样生成的工程文件才会覆盖Clion中的文件，否则会另外生成一个文件夹</p><ul><li>Toolchain &#x2F; IDE：选择<code>SW4STM32</code>(STM32CubeMX版本高于6.5.0则没有)，如果不想安装6.5.0，CLion官方文档有解决方法。<a href="https://www.jetbrains.com/help/clion/2022.3/embedded-development.html?utm_source=product&utm_medium=link&utm_campaign=CL&utm_content=2022.3#edit-sources">STM32CubeMX项目 |CLion 文档 (jetbrains.com)</a></li></ul></li></ol><ul><li><p>可以注意一下堆栈大小，一般0x200~0x400就够用了</p></li><li><p>点击<code>Code Generator</code>勾选 Generate peripheral initialization as a pair of ‘.c&#x2F;.h’ files per peripheral</p><blockquote><p>不勾：所有初始化代码都生成在main.c<br>勾选：初始化代码生成在对应的外设文件。 如GPIO初始化代码生成在gpio.c中。</p></blockquote></li><li><p>等待代码生成完成，关闭CubeMX，回到Clion，已经重新生成了相关的HAL代码，并设置了对应的型号</p></li><li><p>在代码的根目录新建<code>config</code>目录并创建配置文件<code>daplink.cfg</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 选择ST-link</span><br><span class="line">source [find interface/stlink.cfg]</span><br><span class="line"># 传输格式</span><br><span class="line">transport select hla_swd</span><br><span class="line"># 芯片类型【根据自己需要更改相应的设置】</span><br><span class="line">source [find target/stm32h7x.cfg]</span><br><span class="line"># 下载频率 = 10MHz</span><br><span class="line">adapter speed 10000</span><br></pre></td></tr></table></figure></li></ul><h2 id="项目运行并烧录"><a href="#项目运行并烧录" class="headerlink" title="项目运行并烧录"></a>项目运行并烧录</h2><ul><li><p>在<strong>CLion</strong>选择<strong>OpenOCD</strong>添加一个新的运行配置，调试器选择gdb，配置文件选择刚刚创建的daplink.cfg</p><p><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/07/utU6Qk32.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/07/utU6Qk32.png"  alt="pFrlI5F.png" lazyload></a></p></li></ul><p>CLion中组织编译规则都是基于CMakeLists.txt文件</p><p>如果熟悉CMake应该会觉得很方便很强大，不熟悉的也没事，基本不需要额外修改什么，只需要知道怎么在这个文件里面添加源码目录和include文件夹的路径就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># include目录【*.h】</span><br><span class="line">include_directories(</span><br><span class="line">        Core/Inc</span><br><span class="line">        UserApp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 源代码文件【*.c】</span><br><span class="line">file(GLOB_RECURSE SOURCES</span><br><span class="line">        &quot;startup/*.*&quot;</span><br><span class="line">        &quot;Drivers/*.*&quot;</span><br><span class="line">        &quot;Core/*.*&quot;</span><br><span class="line">        &quot;UserApp/*.*&quot;</span><br><span class="line">        &quot;3rdParty/*.*&quot;</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h2 id="代码分包建议"><a href="#代码分包建议" class="headerlink" title="代码分包建议"></a>代码分包建议</h2><p>CubeMX生成的主函数和初始化相关的文件都在<code>Core</code>文件夹中，为了便于管理自己的项目，我一般会将自己的代码和CubeMX生成的代码解耦，自己创建一个<code>User</code>文件夹，结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User    # 用户自定义代码</span><br><span class="line">├─BSP   # 板级支持包</span><br><span class="line">│  ├─Include    # 板级支持包头文件</span><br><span class="line">│  └─Source     # 板级支持包源文件</span><br><span class="line">├─Include   # 自定义头文件</span><br><span class="line">└─Source    # 自定义源文件</span><br></pre></td></tr></table></figure><blockquote><p>关于User文件直接将<code>main.c</code>和<code>main.h</code>移动到<code>User/Source</code>和<code>User/Include</code>中，随后修改<code>CMakeList</code>，再添加自己需要的代码</p><p>另一种则是自己建立<code>main_user.c</code>和<code>main_user.h</code>，分别放入两个文件夹，在<code>main_user.c</code>中定义<code>setup()</code>和<code>loop()</code>函数，并在<code>main_user.h</code>中声明，修改<code>CMakeList</code>，将这俩包含进<code>main.h</code>随后填入CubeMX生成的<code>main.c</code>对应位置，随后到这两个函数中实现自己的初始化和主循环逻辑。</p></blockquote><p>–END 至此简单编译运行HAL库代码–</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;软件环境&quot;&gt;&lt;a href=&quot;#软件环境&quot; class=&quot;headerlink&quot; title=&quot;软件环境&quot;&gt;&lt;/a&gt;软件环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CLion&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;STM32</summary>
      
    
    
    
    
    <category term="STM32" scheme="https://yangsuguo.github.io/ysg.github.io/tags/STM32/"/>
    
  </entry>
  
</feed>
