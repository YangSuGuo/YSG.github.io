<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>楊蘇國的博客</title>
  
  
  <link href="https://yangsuguo.github.io/ysg.github.io/atom.xml" rel="self"/>
  
  <link href="https://yangsuguo.github.io/ysg.github.io/"/>
  <updated>2024-03-08T01:27:55.838Z</updated>
  <id>https://yangsuguo.github.io/ysg.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单使用CLion开发STM32H7系列【填坑中……】</title>
    <link href="https://yangsuguo.github.io/ysg.github.io/2024/03/08/jian-dan-shi-yong-clion-kai-fa-stm32h7-xi-lie-tian-keng-zhong/"/>
    <id>https://yangsuguo.github.io/ysg.github.io/2024/03/08/jian-dan-shi-yong-clion-kai-fa-stm32h7-xi-lie-tian-keng-zhong/</id>
    <published>2024-03-08T01:24:31.599Z</published>
    <updated>2024-03-08T01:27:55.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><ul><li><p><strong>CLion</strong></p></li><li><p><strong>STM32CubeMX</strong></p></li><li><p><strong>MinGW</strong></p></li><li><p><strong>OpenOCD</strong></p></li><li><p><strong>arm-none-eabi-gcc</strong></p></li><li><p>ST-LINK V2驱动</p></li><li><p>J-LINK 驱动</p></li><li><p>USB 串口（CH340）驱动</p></li></ul><h2 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h2><ul><li>STM32H750VBT6</li><li>星光 MINI_STM32H7 开发板</li><li>ST-Link V2下载器</li></ul><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ol><li><p>官方最新版CLion + 破解</p></li><li><p>STM32CubaMX 【建议版本6.5.0 IDE选SW4STM32】</p><p>安装完成后建议修改 <strong>STM32Repository</strong> 位置（尽量不要有中文）</p><p><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/07/Y0qJNtrH.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/07/Y0qJNtrH.png"  alt="QQ截图20240110144706.png" lazyload></a></p></li><li><p>OpenOCD：OpenOCD是用于对STM32进行下载仿真的工具，是一个开源软件包 </p><ul><li>Windows版本下从<a href="http://gnutoolchains.com/arm-eabi/openocd/">这里</a>下载，下载好解压到一个目录就行</li></ul></li><li><p>MinGW<br>Clion需要使用MinGW环境来配置工具链<br>MinGW： <a href="https://osdn.net/projects/mingw/releases/">Minimalist GNU for Windows</a></p><ul><li>下载完成后把<code>Basic Setup</code>里面的组件全部勾选（也可也去掉不需要的语言编译器比如Objective-C）。</li></ul></li><li><p>Arm-none-eabi-gcc<br>Windows下载：<a href="https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads">https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads</a> ，选择ZIP压缩包形式的</p></li></ol><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>配置系统的环境变量，在Path环境变量里面添加</p><ul><li><strong>MinGW</strong>：<code>你的路径</code>\MinGW\bin</li><li><strong>gcc-arm-none-eabi</strong>：<code>你的路径</code>\gcc-arm-none-eabi-10.3-2021.10\bin</li></ul><p>完成后终端验证（有信息则成功）</p><ul><li>gcc -v</li><li>arm-none-eabi-gcc -v</li></ul><h3 id="CLion设置配置"><a href="#CLion设置配置" class="headerlink" title="CLion设置配置"></a>CLion设置配置</h3><p>打开CLion设置 &gt; 构建、执行、部署 &gt; 工具链</p><ul><li><p>建议新建一个新配置并改名为<code>MinGW STM32</code></p></li><li><p>详细配置，根据你的MinGW，gcc-arm-none-eabi（gcc，g++，gdb）进行设置</p><p><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/07/AYWmh2DG.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/07/AYWmh2DG.png"  alt="屏幕截图 2024-03-06 190246.png" lazyload></a></p></li><li><p>返回 CLion设置 &gt; 构建、执行、部署 检查<code>CMake</code>确认一下<strong>工具链</strong>是否正确</p><p><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/07/qRa0WdNl.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/07/qRa0WdNl.png"  alt="屏幕截图 2024-03-06 190810.png" lazyload></a></p></li><li><p>进入CLion设置 &gt; 构建、执行、部署 &gt; 嵌入式开发 设置安装完成的STM32CubeMX，OpenOCD路径</p><p><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/07/auVhQhqB.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/07/auVhQhqB.png"  alt="屏幕截图 2024-03-06 191148.png" lazyload></a></p></li></ul><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>期间弹出的板卡配置选择默认关闭</p><ol><li><p>使用<code>CLion</code>创建<strong>STM32CubeMX</strong>项目，会自动生成一个【*.ioc】文件点击打开<strong>STM32CubeMX</strong>创建项目</p></li><li><p>默认生成项目芯片型号是<code>STM32F030F4Px</code>，更改型号为<strong>STM32H750VBT6</strong>然后确认</p><p><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/07/ThOpYHrU.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/07/ThOpYHrU.png"  alt="屏幕截图 2024-03-06 192241.png" lazyload></a></p></li><li><p>直接点击Project Manager</p><p>注意：就是在下面的设置中<strong>项目名称和路径一定要和在Clion中建立的一致</strong>，这样生成的工程文件才会覆盖Clion中的文件，否则会另外生成一个文件夹</p><ul><li>Toolchain &#x2F; IDE：选择<code>SW4STM32</code>(STM32CubeMX版本高于6.5.0则没有)，如果不想安装6.5.0，CLion官方文档有解决方法。<a href="https://www.jetbrains.com/help/clion/2022.3/embedded-development.html?utm_source=product&utm_medium=link&utm_campaign=CL&utm_content=2022.3#edit-sources">STM32CubeMX项目 |CLion 文档 (jetbrains.com)</a></li></ul></li></ol><ul><li><p>可以注意一下堆栈大小，一般0x200~0x400就够用了</p></li><li><p>点击<code>Code Generator</code>勾选 Generate peripheral initialization as a pair of ‘.c&#x2F;.h’ files per peripheral</p><blockquote><p>不勾：所有初始化代码都生成在main.c<br>勾选：初始化代码生成在对应的外设文件。 如GPIO初始化代码生成在gpio.c中。</p></blockquote></li><li><p>等待代码生成完成，关闭CubeMX，回到Clion，已经重新生成了相关的HAL代码，并设置了对应的型号</p></li><li><p>在代码的根目录新建<code>config</code>目录并创建配置文件<code>daplink.cfg</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 选择ST-link</span><br><span class="line">source [find interface/stlink.cfg]</span><br><span class="line"># 传输格式</span><br><span class="line">transport select hla_swd</span><br><span class="line"># 芯片类型【根据自己需要更改相应的设置】</span><br><span class="line">source [find target/stm32h7x.cfg]</span><br><span class="line"># 下载频率 = 10MHz</span><br><span class="line">adapter speed 10000</span><br></pre></td></tr></table></figure></li></ul><h2 id="项目运行并烧录"><a href="#项目运行并烧录" class="headerlink" title="项目运行并烧录"></a>项目运行并烧录</h2><ul><li><p>在<strong>CLion</strong>选择<strong>OpenOCD</strong>添加一个新的运行配置，调试器选择gdb，配置文件选择刚刚创建的daplink.cfg</p><p><a class="simple-lightbox" href="https://img2.imgtp.com/2024/03/07/utU6Qk32.png"><img   src="/ysg.github.io/images/loading.svg" data-src="https://img2.imgtp.com/2024/03/07/utU6Qk32.png"  alt="pFrlI5F.png" lazyload></a></p></li></ul><p>CLion中组织编译规则都是基于CMakeLists.txt文件</p><p>如果熟悉CMake应该会觉得很方便很强大，不熟悉的也没事，基本不需要额外修改什么，只需要知道怎么在这个文件里面添加源码目录和include文件夹的路径就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># include目录【*.h】</span><br><span class="line">include_directories(</span><br><span class="line">        Core/Inc</span><br><span class="line">        UserApp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 源代码文件【*.c】</span><br><span class="line">file(GLOB_RECURSE SOURCES</span><br><span class="line">        &quot;startup/*.*&quot;</span><br><span class="line">        &quot;Drivers/*.*&quot;</span><br><span class="line">        &quot;Core/*.*&quot;</span><br><span class="line">        &quot;UserApp/*.*&quot;</span><br><span class="line">        &quot;3rdParty/*.*&quot;</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h2 id="代码分包建议"><a href="#代码分包建议" class="headerlink" title="代码分包建议"></a>代码分包建议</h2><p>CubeMX生成的主函数和初始化相关的文件都在<code>Core</code>文件夹中，为了便于管理自己的项目，我一般会将自己的代码和CubeMX生成的代码解耦，自己创建一个<code>User</code>文件夹，结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User    # 用户自定义代码</span><br><span class="line">├─BSP   # 板级支持包</span><br><span class="line">│  ├─Include    # 板级支持包头文件</span><br><span class="line">│  └─Source     # 板级支持包源文件</span><br><span class="line">├─Include   # 自定义头文件</span><br><span class="line">└─Source    # 自定义源文件</span><br></pre></td></tr></table></figure><blockquote><p>关于User文件直接将<code>main.c</code>和<code>main.h</code>移动到<code>User/Source</code>和<code>User/Include</code>中，随后修改<code>CMakeList</code>，再添加自己需要的代码</p><p>另一种则是自己建立<code>main_user.c</code>和<code>main_user.h</code>，分别放入两个文件夹，在<code>main_user.c</code>中定义<code>setup()</code>和<code>loop()</code>函数，并在<code>main_user.h</code>中声明，修改<code>CMakeList</code>，将这俩包含进<code>main.h</code>随后填入CubeMX生成的<code>main.c</code>对应位置，随后到这两个函数中实现自己的初始化和主循环逻辑。</p></blockquote><p>–END 至此简单编译运行HAL库代码–</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;软件环境&quot;&gt;&lt;a href=&quot;#软件环境&quot; class=&quot;headerlink&quot; title=&quot;软件环境&quot;&gt;&lt;/a&gt;软件环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CLion&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;STM32</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yangsuguo.github.io/ysg.github.io/2024/03/07/hello-world/"/>
    <id>https://yangsuguo.github.io/ysg.github.io/2024/03/07/hello-world/</id>
    <published>2024-03-07T06:47:01.799Z</published>
    <updated>2024-03-08T11:03:20.295Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>基本脚注<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="footnote--top">[1]<content class="footnote--pop-ups">基本脚注内容</content></span></a></sup><br>这是一个内联脚注<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="footnote--top">[2]<content class="footnote--pop-ups">内联脚注</content></span></a></sup><br>另一个<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="footnote--top">[3]<content class="footnote--pop-ups">段落<br>脚注<br>内容</content></span></a></sup><br>另一个<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="footnote--top">[4]<content class="footnote--pop-ups">一些脚注内容 <a href="https://en.wikipedia.org/wiki/Markdown">markdown</a></content></span></a></sup></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">基本脚注内容<a href="#fnref:1"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">内联脚注<a href="#fnref:2"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">段落脚注内容<a href="#fnref:3"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">一些脚注内容 <a href="https://en.wikipedia.org/wiki/Markdown">markdown</a><a href="#fnref:4"> ↩</a></span></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>毕业答辩 需求文档【没有想好做什么】</title>
    <link href="https://yangsuguo.github.io/ysg.github.io/2023/11/20/bi-ye-da-bian-xu-qiu-wen-dang-mei-you-xiang-hao-zuo-shi-me/"/>
    <id>https://yangsuguo.github.io/ysg.github.io/2023/11/20/bi-ye-da-bian-xu-qiu-wen-dang-mei-you-xiang-hao-zuo-shi-me/</id>
    <published>2023-11-19T16:00:00.000Z</published>
    <updated>2024-03-09T10:59:30.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="运用到自己所学的知识，体现自己的校园生活"><a href="#运用到自己所学的知识，体现自己的校园生活" class="headerlink" title="运用到自己所学的知识，体现自己的校园生活"></a>运用到自己所学的知识，体现自己的校园生活</h3><ol><li>使用 <strong>SpringBoot</strong> 搭建后台</li><li>使用<strong>MySQL</strong>设计数据库表结构</li><li><strong>Vue 2&amp;3？</strong>搭建网页管理页面</li><li><strong>Flutter</strong>搭建APP主体内容【响应式页面适配】，并适配<strong>Android</strong>与<strong>iOS</strong></li><li>可能加入物联网设备与APP通信与控制，体现嵌入式开发</li></ol><h2 id="1-SpringBoot-后台管理"><a href="#1-SpringBoot-后台管理" class="headerlink" title="1. SpringBoot 后台管理"></a>1. SpringBoot 后台管理</h2><ul><li>通知推送管理 — APP宣传内容的离线推送内容接口【flutter插件适配各厂商的推送SDK，vue网页进行推送管理】</li><li>登录&amp;注册 — 密码加密</li><li>电邮验证码 — 用于登录&amp;注册的电子邮箱的发送与验证及APP消息及活动推送</li><li>数据库 — 可能使用<strong>PostgreSQL</strong>&amp;<strong>MySQL</strong></li><li>评论 — 实现用户评论与回复</li></ul><h2 id="2-数据库表结构设计"><a href="#2-数据库表结构设计" class="headerlink" title="2. 数据库表结构设计"></a>2. 数据库表结构设计</h2><h3 id="可能根据实际情况进行变更"><a href="#可能根据实际情况进行变更" class="headerlink" title="可能根据实际情况进行变更"></a>可能根据实际情况进行变更</h3><h2 id="3-Vue管理后台"><a href="#3-Vue管理后台" class="headerlink" title="3.Vue管理后台"></a>3.Vue管理后台</h2><ul><li>通知推送管理 — 可视化管理消息推送</li><li>管理员账号 — 权限管理</li><li>指定用户资料查看</li><li>嵌入式设备 — 查看嵌入式设备信息【可能制作数据图表】</li></ul><h2 id="4-Flutter-APP开发"><a href="#4-Flutter-APP开发" class="headerlink" title="4.Flutter APP开发"></a>4.Flutter APP开发</h2><h3 id="响应式页面适配不同尺寸屏幕"><a href="#响应式页面适配不同尺寸屏幕" class="headerlink" title="响应式页面适配不同尺寸屏幕"></a>响应式页面适配不同尺寸屏幕</h3><h3 id="离线加载缓存"><a href="#离线加载缓存" class="headerlink" title="离线加载缓存"></a>离线加载缓存</h3><h3 id="适配Android与IOS"><a href="#适配Android与IOS" class="headerlink" title="适配Android与IOS"></a>适配Android与IOS</h3><ol><li>需求文档完善，插件文档看一遍</li><li>产品原型图【这个可以随便做，但是绝对得有】</li><li>原型开发</li><li>单元测试与集成测试</li><li>用户测试</li><li>完成！！</li></ol><h2 id="5-物联网嵌入式开发"><a href="#5-物联网嵌入式开发" class="headerlink" title="5.物联网嵌入式开发"></a>5.物联网嵌入式开发</h2><h3 id="有屏幕！！MQTT协议"><a href="#有屏幕！！MQTT协议" class="headerlink" title="有屏幕！！MQTT协议"></a>有屏幕！！MQTT协议</h3><h3 id="基础的物联网数据采集【温-湿度】"><a href="#基础的物联网数据采集【温-湿度】" class="headerlink" title="基础的物联网数据采集【温,湿度】"></a>基础的物联网数据采集【温,湿度】</h3><h3 id="网络配网并上传SpringBoot"><a href="#网络配网并上传SpringBoot" class="headerlink" title="网络配网并上传SpringBoot"></a>网络配网并上传SpringBoot</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;运用到自己所学的知识，体现自己的校园生活&quot;&gt;&lt;a href=&quot;#运用到自己所学的知识，体现自己的校园生活&quot; class=&quot;headerlink&quot; title=&quot;运用到自己所学的知识，体现自己的校园生活&quot;&gt;&lt;/a&gt;运用到自己所学的知识，体现自己的校园生活&lt;/h3&gt;&lt;</summary>
      
    
    
    
    
    <category term="STM32" scheme="https://yangsuguo.github.io/ysg.github.io/tags/STM32/"/>
    
  </entry>
  
</feed>
